package com.xmpp.imp;

import org.jivesoftware.smack.AccountManager;
import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.ChatManager;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.ConnectionConfiguration.SecurityMode;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.Roster;
import org.jivesoftware.smack.SmackConfiguration;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.packet.Presence.Type;

public class XmppClient{	
	
    
    private String server;
    private int port;
     
    private ConnectionConfiguration config;
    private XMPPConnection connection;
 
    private ChatManager chatManager;
    private MessageListener messageListener;
     
    public XmppClient(String server, int port) {
        this.server = server;
        this.port = port;
    }
	
	public void init() throws XMPPException {
		System.out.println(String.format("Iniciando conexion al server %1$s port %2$d", server, port));
		 
        
        config = new ConnectionConfiguration(server, port);       
         
        connection = new XMPPConnection(config);
        connection.connect();
         
        System.out.println("conectado: " + connection.isConnected());
         
        chatManager = connection.getChatManager();
        messageListener = new MyMessageListener();

	}
	
	public void performLogin(String username, String password) throws XMPPException {
        if (connection!=null && connection.isConnected()) {
        	System.out.println("sigue conectado" );
            connection.login(username, password);
            System.out.println("se conecto");
        }
    }
 
    public void setStatus(boolean available, String status) {
         
        Presence.Type type = available? Type.available: Type.unavailable;
        Presence presence = new Presence(type);
         
        presence.setStatus(status);
        connection.sendPacket(presence);
         
    }
     
    public void destroy() {
        if (connection!=null && connection.isConnected()) {
            connection.disconnect();
        }
    }
     
    public void sendMessage(String message, String buddyJID) throws XMPPException {
        System.out.println(String.format("Enviando mensaje '%1$s' to user %2$s", message, buddyJID));
        Chat chat = chatManager.createChat(buddyJID, messageListener);
        chat.sendMessage(message);
    }
     
    public void createEntry(String user, String name) throws Exception {
        System.out.println(String.format("Creando entrada para compañero '%1$s' with name %2$s", user, name));
        Roster roster = connection.getRoster();
        roster.createEntry(user, name, null);
    }
     
    class MyMessageListener implements MessageListener {
 
        public void processMessage(Chat chat, Message message) {
            String from = message.getFrom();
            String body = message.getBody();
            System.out.println(String.format("Reciviendo mensaje '%1$s' from %2$s", body, from));
        }
         
    }
    
    public boolean isConnected() {
    	return connection.isConnected();
    }
	
	public void createAccountForUser()  {
		
		ConnectionConfiguration config = 
			     new ConnectionConfiguration("alumchat.xyz", 5222);
	            
		XMPPConnection connection = new XMPPConnection(config);
		try {
			connection.connect();
		} catch (XMPPException e) {
			
			e.printStackTrace();
		} 
		
		AccountManager accountManager = connection.getAccountManager();
		try {
			accountManager.createAccount("amanda1", "1234");
		} catch (XMPPException e) {
			
			System.out.println("error: " + e.getMessage());
		}
		
		System.out.println("cuenta creada");
		
		

	}
	
	
}
