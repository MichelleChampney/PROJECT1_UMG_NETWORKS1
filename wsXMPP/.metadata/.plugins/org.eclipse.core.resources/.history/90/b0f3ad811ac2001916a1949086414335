package com.xmpp.imp;

import java.util.Collection;

import org.jivesoftware.smack.AccountManager;
import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.ChatManager;
import org.jivesoftware.smack.ChatManagerListener;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.Roster;
import org.jivesoftware.smack.RosterEntry;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.packet.Presence.Type;
import org.jivesoftware.smackx.ChatState;
import org.jivesoftware.smackx.ChatStateListener;

public class XmppClient {

	private String server;
	private int port;

	private ConnectionConfiguration config;
	private XMPPConnection connection;

	private ChatManager chatManager;
	private MessageListener messageListener;

	public XmppClient(String server, int port) {
		this.server = server;
		this.port = port;
	}

	public void init() throws XMPPException {
		System.out.println(String.format("Iniciando conexion al server %1$s port %2$d", server, port));

		config = new ConnectionConfiguration(server, port);

		connection = new XMPPConnection(config);
		connection.connect();

		System.out.println("conectado: " + connection.isConnected());

		chatManager = connection.getChatManager();
		messageListener = new MyMessageListener();

		connection.getChatManager().addChatListener(new ChatManagerListener() {

			public void chatCreated(final Chat arg0, final boolean arg1) {
				// TODO Auto-generated method stub

				arg0.addMessageListener(new MessageListener() {

					public void processMessage(Chat arg0, Message arg1) {
						// TODO Auto-generated method stub

						System.out.println("is typing......");
						String from = arg1.getFrom();
						String body = arg1.getBody();
						System.out.println(String.format("Recibiendo mensaje '%1$s' from %2$s", body, from));
					}
				});
			}
		});

	}

	public void performLogin(String username, String password) throws XMPPException {
		if (connection != null && connection.isConnected()) {
			System.out.println("sigue conectado");
			connection.login(username, password);
			System.out.println("se conecto");
		}
	}

	public void setStatus(boolean available, String status) {

		Presence.Type type = available ? Type.available : Type.unavailable;
		Presence presence = new Presence(type);

		presence.setStatus(status);
		connection.sendPacket(presence);

	}

	public void destroy() {
		if (connection != null && connection.isConnected()) {
			connection.disconnect();
		}
	}

	public void sendMessage(String message, String buddyJID) throws XMPPException {
		System.out.println(String.format("Enviando mensaje '%1$s' to user %2$s", message, buddyJID));
		Chat chat = chatManager.createChat(buddyJID, messageListener);
		chat.sendMessage(message);
	}

	public void createEntry(String user, String name) throws Exception {
		System.out.println(String.format("Creando entrada para compañero '%1$s' with name %2$s", user, name));
		Roster roster = connection.getRoster();
		roster.createEntry(user, name, null);
	}

	class MyMessageListener implements MessageListener, ChatStateListener {

		public void stateChanged(Chat chat, ChatState chatState) {
			System.out.println("ENTRA ");
			if (ChatState.composing.equals(chatState)) {
				System.out.println("Chat State" + chat.getParticipant() + " is typing..");
			} else if (ChatState.gone.equals(chatState)) {
				System.out.println("Chat State" + chat.getParticipant() + " has left the conversation.");
			} else {
				System.out.println("Chat State" + chat.getParticipant() + ": " + chatState.name());
			}
		}

		public void processMessage(Chat chat, Message message) {
			/*
			 * String from = message.getFrom(); String body = message.getBody();
			 * System.out.println(String.format("Recibiendo mensaje '%1$s' from %2$s", body,
			 * from));
			 */
		}

	}

	public boolean isConnected() {
		return connection.isConnected();
	}

	public void createAccountForUser() {

		ConnectionConfiguration config = new ConnectionConfiguration("alumchat.xyz", 5222);

		XMPPConnection connection = new XMPPConnection(config);
		try {
			connection.connect();
		} catch (XMPPException e) {

			e.printStackTrace();
		}

		AccountManager accountManager = connection.getAccountManager();
		try {
			accountManager.createAccount("amanda1", "1234");
		} catch (XMPPException e) {

			System.out.println("error: " + e.getMessage());
		}

		System.out.println("cuenta creada");

	}

	public void deleteAccountForUser() {

		ConnectionConfiguration config = new ConnectionConfiguration("alumchat.xyz", 5222);

		XMPPConnection connection = new XMPPConnection(config);
		try {
			connection.connect();
		} catch (XMPPException e) {

			e.printStackTrace();
		}

		AccountManager accountManager = connection.getAccountManager();
		try {
			accountManager.deleteAccount();
		} catch (XMPPException e) {

			System.out.println("error: " + e.getMessage());
		}

		System.out.println("cuenta eliminada");

	}

	public void userConnected() {
		Roster roster = connection.getRoster();
		Collection<RosterEntry> entries = roster.getEntries();
		Presence presence = null;

		for (RosterEntry entry : entries) {
			presence = roster.getPresence(entry.getUser() + "@alumchat.xyz");

			System.out.println("Usuario:" + entry.getUser() + " /n Nombre: " + entry.getName() + " /n Disponibilidad: "
					+ presence.getType());

		}

	}

	public void userInfo(String user) {
		Roster roster = connection.getRoster();
		Collection<RosterEntry> entries = roster.getEntries();
		Presence presence = null;

		for (RosterEntry entry : entries) {

			if (entry.getUser().equalsIgnoreCase(user)) {
				presence = roster.getPresence(user + "@alumchat.xyz");

				if (presence.getType() == Presence.Type.available) {
					System.out.print("INFO /n");
					System.out.println("DISPONIBLE " + entry.getUser() + " - " + presence.getType());
				} else {
					System.out.print("INFO /n");
					System.out.println("DESACTIVADO " + entry.getUser() + " - " + presence.getType());
				}
			}
		}
	}

}
